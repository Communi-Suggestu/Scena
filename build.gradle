plugins {
    id "net.neoforged.gradle.common"
}

project.group = "com.communi-suggestu.scena"
project.version = (System.getenv().containsKey("Version") ? System.getenv("Version") : project.localVersion)

subprojects { subProject ->
    subProject.apply { configure ->
        configure.plugin("idea")
        configure.plugin("java")
        configure.plugin("java-library")
        configure.plugin("maven-publish")
    }

    subProject.repositories.mavenLocal()
    subProject.repositories.mavenCentral()
    subProject.repositories.maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }

    subProject.group = rootProject.group
    subProject.version = rootProject.version

    subProject.java.toolchain.languageVersion.set(JavaLanguageVersion.of(project.javaVersion))

    subProject.tasks.jar.archiveBaseName = "${rootProject.name}-${subProject.name}"
    subProject.tasks.jar.manifest.attributes([
                    'Maven-Artifact'          : "${rootProject.group}:${subProject.archivesBaseName}:${subProject.version}",
                    "Specification-Title"     : rootProject.name,
                    "Specification-Vendor"    : rootProject.owner,
                    "Specification-Version"   : rootProject.version,
                    "Implementation-Title"    : rootProject.name,
                    "Implementation-Version"  : rootProject.version,
                    "Implementation-Vendor"   : rootProject.owner,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Automatic-Module-Name"   : subProject.name.toLowerCase().replace("-", "_"),
                    "MixinConfigs": "${rootProject.name.toLowerCase()}.mixins.json",
                    "FMLModType": "GAMELIBRARY"
            ])
    subProject.tasks.jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    if (System.getenv().containsKey("LDTTeamJfrogUsername") && System.getenv().containsKey("LDTTeamJfrogPassword")) {
        subProject.publishing.repositories.maven {
            name 'LDTTeamJfrog'
            credentials.username System.getenv().get("LDTTeamJfrogUsername")
            credentials.password System.getenv().get("LDTTeamJfrogPassword")
            url 'https://ldtteam.jfrog.io/ldtteam/mods-maven'
        }
    }

    subProject.publishing.repositories.maven {
        name 'InternalDirectory'
        url 'file://' + rootProject.file('repo').getAbsolutePath()
    }

    subProject.dependencies.compileOnly "org.jetbrains:annotations:${project.jetbrainsAnnotationsVersion}"
    subProject.dependencies.testCompileOnly "org.jetbrains:annotations:${project.jetbrainsAnnotationsVersion}"

    subProject.ext.setupEmbeddedPublishing = { mavenPublication ->
        subProject.afterEvaluate { evaluatedSubProject ->
            if (evaluatedSubProject.getPlugins().hasPlugin("net.neoforged.gradle.userdev")) {
                evaluatedSubProject.jarJar.component(mavenPublication)
            }
        }
    }

    subProject.ext.disableCompiling = {
        subProject.tasks.build.enabled = false
        subProject.tasks.jar.enabled = false
        subProject.tasks.processResources.enabled = false
        subProject.tasks.assemble.enabled = false
        subProject.tasks.compileJava.enabled = false
        subProject.tasks.classes.enabled = false
        subProject.tasks.test.enabled = false
    }

    subProject.ext.addCoreProject = {
        def coreProject = subProject.project(":scena-core")

        subProject.dependencies.implementation(coreProject) {
            transitive = false
        }

        subProject.tasks.jar.from coreProject.sourceSets.main.output
        subProject.tasks.processResources.from coreProject.sourceSets.main.resources
        subProject.tasks.processResources.inputs.property "version", subProject.version
        subProject.tasks.processResources.duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        if (subProject.getPlugins().hasPlugin("net.neoforged.neogradle.userdev")) {
            subProject.tasks.jarJar.from coreProject.sourceSets.main.output
        }
    }

    subProject.ext.getAllSupportedMcVersionsAsStringArray = {
        if (subProject.additionalMinecraftVersions == "") {
            return "${subProject.minecraftVersion}"
        }

        return "${subProject.minecraftVersion}\", \"${subProject.additionalMinecraftVersions.split(",").join("\", \"")}"
    }

    subProject.ext.getSupportedVersionRange = {
        if (subProject.additionalMinecraftVersions == "") {
            return "[${subProject.minecraftVersion}]"
        }

        return "[${subProject.additionalMinecraftVersions.split(",")[0]}, ${subProject.minecraftVersion}]"
    }

    subProject.afterEvaluate {
        if(subProject.tasks.build.enabled) {
            subProject.publishing {
                publications {
                    mavenJava(MavenPublication) { pub ->
                        from subProject.components.java

                        pom {
                            url = subProject.githubUrl
                            licenses {
                                license {
                                    name = 'GNU GENERAL PUBLIC LICENSE Version 3'
                                    url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                                }
                            }
                            developers {
                                developer {
                                    id = 'OrionDevelopment'
                                    name = 'Marc Hermans'
                                    email = 'marc.hermans@ldtteam.com'
                                }
                            }
                            scm {
                                connection = subProject.gitUrl
                                developerConnection = subProject.gitConnectUrl
                                url = subProject.projectUrl
                            }
                        }

                        subProject.setupEmbeddedPublishing(pub)
                    }
                }
            }
        }
    }
}