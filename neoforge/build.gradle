plugins {
    id 'net.neoforged.gradle.userdev'
}

configurations.create("includedLibraries")
configurations.api.extendsFrom configurations.includedLibraries

project.addCoreProject()

subsystems {
    parchment {
        minecraftVersion = project.parchmentMinecraftVersion
        mappingsVersion = project.parchmentVersion
    }
}

project.minecraft.accessTransformers.file project(":common").file("forge.accesstransformer.cfg")

project.runs { runSpecContainer ->
    client { clientRun ->
        jvmArguments.addAll "-Dmixin.debug=true", "-Dmixin.debug.export=true"
        modSource project(":core").sourceSets.main
    }
}

project.dependencies.implementation "net.neoforged:neoforge:${project.forgeVersion}"
project.dependencies.includedLibraries("com.communi-suggestu.saecularia-caudices:saecularia-caudices-neoforge:${project.saeculariaCaudicesVersion}") {
    jarJar.ranged(it, buildSupportedVersionRange(project.saeculariaCaudicesVersion))
}

project.tasks.processResources.from(project(":common").file("forge.accesstransformer.cfg"), (CopySpec spec) -> {
    spec.into("META-INF")
    spec.rename("forge.accesstransformer.cfg", "accesstransformer.cfg")
})
project.tasks.processResources.outputs.upToDateWhen { false }
project.tasks.processResources.filesMatching("META-INF/mods.toml") {
    expand([
            "version"                                : project.version,
            "name"                                   : rootProject.name.toString(),
            "id"                                     : rootProject.modId,
            "description"                            : (rootProject.description == null ? "" : rootProject.description).toString(),
            "author"                                 : rootProject.author.toString(),
            "sources"                                : rootProject.githubUrl.toString(),
            "package"                                : "${rootProject.group}.${subProject.name.toLowerCase()}".toString(),
            "forgeVersion"                           : project.forgeVersion,
            "minecraftVersion"                       : project.minecraftVersion,
            "supportedSaeculariaCaudicesVersionRange": buildSupportedVersionRange(project.scenaVersion),
            "saeculariaCaudicesVersion"              : project.scenaVersion,
            "fabricVersion"                          : project.fabricVersion,
            "fabricLoaderVersion"                    : project.fabricLoaderVersion,
    ])
}

tasks.jarJar.configuration project.configurations.includedLibraries
tasks.jarJar.archiveClassifier.set("")
tasks.jar.archiveClassifier.set("slim")
tasks.assemble.dependsOn tasks.jarJar

